MODULE adda(event)
    VAR
        state: 0 .. 5;
        HOT_requested: boolean;
        must_finish: boolean;
    INIT
        state = 0
    ASSIGN
        HOT_requested :=
            case
                state = 0: FALSE;
                state = 1: TRUE;
                state = 2: FALSE;
                state = 3: TRUE;
                state = 4: TRUE;
                TRUE: FALSE;
            esac;
        next(state) :=
            case
                state = 0 & (next(event) = Start | FALSE): 4;
                state = 1 & (next(event) = HOT | FALSE): 2;
                state = 3 & (next(event) = HOT | FALSE): 1;
                state = 4 & (next(event) = HOT | FALSE): 3;
                TRUE: state;
            esac;
        must_finish :=
            case
                state = 4 | state = 3 | state = 1 | FALSE: TRUE;
                state = 2 | state = 0 | FALSE: FALSE;
                TRUE: FALSE;
            esac;
MODULE addb0(event)
    VAR
        state: 0 .. 5;
        COLD0_requested: boolean;
        must_finish: boolean;
    INIT
        state = 0
    ASSIGN
        COLD0_requested :=
            case
                state = 0: FALSE;
                state = 1: TRUE;
                state = 2: TRUE;
                state = 3: FALSE;
                state = 4: TRUE;
                TRUE: FALSE;
            esac;
        next(state) :=
            case
                state = 0 & (next(event) = Start | FALSE): 1;
                state = 1 & (next(event) = COLD0 | FALSE): 4;
                state = 2 & (next(event) = COLD0 | FALSE): 3;
                state = 4 & (next(event) = COLD0 | FALSE): 2;
                TRUE: state;
            esac;
        must_finish :=
            case
                FALSE: TRUE;
                state = 4 | state = 3 | state = 2 | state = 1 | state = 0 | FALSE: FALSE;
                TRUE: FALSE;
            esac;
MODULE control(event)
    VAR
        state: 0 .. 3;
        Start_requested: boolean;
        HOT_blocked: boolean;
        must_finish: boolean;
    INIT
        state = 0
    ASSIGN
        Start_requested :=
            case
                state = 0: TRUE;
                state = 1: FALSE;
                state = 2: FALSE;
                TRUE: FALSE;
            esac;
        HOT_blocked :=
            case
                state = 0: FALSE;
                state = 1: FALSE;
                state = 2: TRUE;
                TRUE: FALSE;
            esac;
        next(state) :=
            case
                state = 0 & (next(event) = Start | FALSE): 1;
                state = 1 & (next(event) = HOT | FALSE): 2;
                state = 2 & (next(event) = COLD0 | FALSE): 1;
                TRUE: state;
            esac;
        must_finish :=
            case
                FALSE: TRUE;
                state = 2 | state = 1 | state = 0 | FALSE: FALSE;
                TRUE: FALSE;
            esac;
MODULE main
    VAR
        event: {START, Start, HOT, COLD0};
        bt0: adda(event);
        bt1: addb0(event);
        bt2: control(event);
    INIT
        event = START
    DEFINE
        Start_requested := bt2.Start_requested | FALSE;
        Start_blocked := FALSE;
        HOT_requested := bt0.HOT_requested | FALSE;
        HOT_blocked := bt2.HOT_blocked | FALSE;
        COLD0_requested := bt1.COLD0_requested | FALSE;
        COLD0_blocked := FALSE;
        must_finish := bt2.must_finish | bt1.must_finish | bt0.must_finish | FALSE;
        Start_enabled := Start_requested & !Start_blocked;
        HOT_enabled := HOT_requested & !HOT_blocked;
        COLD0_enabled := COLD0_requested & !COLD0_blocked;
        DEADLOCK := (Start_requested | HOT_requested | COLD0_requested) & !(Start_enabled | HOT_enabled | COLD0_enabled);
    TRANS
        next(event) != START & (!Start_enabled -> next(event) != Start) & (!HOT_enabled -> next(event) != HOT) & (!COLD0_enabled -> next(event) != COLD0)
SPEC AG (deadlock = FALSE)